import os
import json
import re
import shutil
import zipfile
from datetime import datetime, timedelta
import random
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import piexif
import glob
import requests
from urllib.parse import quote

# --- C·∫•u h√¨nh th∆∞ m·ª•c ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
MOCKUP_DIR = os.path.join(SCRIPT_DIR, "Mockup")
INPUT_DIR = os.path.join(SCRIPT_DIR, "InputImage")
OUTPUT_IMAGE_DIR = os.path.join(SCRIPT_DIR, "OutputImage") 
CONFIG_FILE = os.path.join(SCRIPT_DIR, "config.json")
TOTAL_IMAGE_FILE = os.path.join(SCRIPT_DIR, "TotalImage.txt")

# --- C√°c h√†m h·ªó tr·ª£ ---

def load_total_counts(filepath):
    """ƒê·ªçc s·ªë l∆∞·ª£ng ·∫£nh ƒë√£ t·∫°o t·ª´ file TotalImage.txt."""
    counts = {}
    if not os.path.exists(filepath):
        print("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y file TotalImage.txt, s·∫Ω t·∫°o file m·ªõi sau khi ch·∫°y xong.")
        return counts
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            for line in f:
                if ':' in line:
                    name, count = line.strip().split(':', 1)
                    counts[name.strip()] = int(count.strip())
        print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng d·ªØ li·ªáu t·ª´: {filepath}")
    except Exception as e:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ ƒë·ªçc file TotalImage.txt. S·∫Ω b·∫Øt ƒë·∫ßu ƒë·∫øm l·∫°i. L·ªói: {e}")
        return {}
    return counts

def save_total_counts(filepath, counts):
    """L∆∞u t·ªïng s·ªë ·∫£nh v√†o file TotalImage.txt."""
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            for name, count in sorted(counts.items()):
                f.write(f"{name}: {count}\n")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file TotalImage.txt: {e}")

def cleanup_input_directory(directory, processed_files_list):
    """X√≥a c√°c file ƒë√£ x·ª≠ l√Ω trong th∆∞ m·ª•c Input."""
    print(f"\n--- üóëÔ∏è D·ªçn d·∫πp th∆∞ m·ª•c: {directory} ---")
    if not os.path.exists(directory):
        return
    for filename in processed_files_list:
        file_path = os.path.join(directory, filename)
        try:
            if os.path.isfile(file_path):
                os.unlink(file_path)
                print(f"  - ƒê√£ x√≥a: {filename}")
        except Exception as e:
            print(f'L·ªói khi x√≥a {file_path}. L√Ω do: {e}')

def _convert_to_gps(value, is_longitude):
    """Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô th·∫≠p ph√¢n sang ƒë·ªãnh d·∫°ng EXIF GPS."""
    abs_value = abs(value)
    ref = ('E' if value >= 0 else 'W') if is_longitude else ('N' if value >= 0 else 'S')
    degrees = int(abs_value)
    minutes_float = (abs_value - degrees) * 60
    minutes = int(minutes_float)
    seconds_float = (minutes_float - minutes) * 60
    return {
        'value': ((degrees, 1), (minutes, 1), (int(seconds_float * 100), 100)),
        'ref': ref.encode('ascii')
    }

def create_exif_data(prefix, final_filename, exif_defaults):
    """T·∫°o chu·ªói bytes EXIF."""
    domain_exif = prefix + ".com"
    digitized_time = datetime.now() - timedelta(hours=2)
    random_seconds = random.randint(3600, 7500)
    original_time = digitized_time - timedelta(seconds=random_seconds)
    digitized_str = digitized_time.strftime("%Y:%m:%d %H:%M:%S")
    original_str = original_time.strftime("%Y:%m:%d %H:%M:%S")
    try:
        zeroth_ifd = {
            piexif.ImageIFD.Artist: domain_exif.encode('utf-8'),
            piexif.ImageIFD.Copyright: domain_exif.encode('utf-8'),
            piexif.ImageIFD.ImageDescription: final_filename.encode('utf-8'),
            piexif.ImageIFD.Software: exif_defaults.get("Software", "Adobe Photoshop 25.0").encode('utf-8'),
            piexif.ImageIFD.DateTime: digitized_str.encode('utf-8'),
            piexif.ImageIFD.Make: exif_defaults.get("Make", "").encode('utf-8'),
            piexif.ImageIFD.Model: exif_defaults.get("Model", "").encode('utf-8'),
            piexif.ImageIFD.XPAuthor: domain_exif.encode('utf-16le'),
            piexif.ImageIFD.XPComment: final_filename.encode('utf-16le'),
            piexif.ImageIFD.XPSubject: final_filename.encode('utf-16le'),
            piexif.ImageIFD.XPKeywords: (prefix + ";" + "shirt;").encode('utf-16le')
        }
        exif_ifd = {
            piexif.ExifIFD.DateTimeOriginal: original_str.encode('utf-8'),
            piexif.ExifIFD.DateTimeDigitized: digitized_str.encode('utf-8'),
            piexif.ExifIFD.FNumber: tuple(exif_defaults.get("FNumber", [0,1])),
            piexif.ExifIFD.ExposureTime: tuple(exif_defaults.get("ExposureTime", [0,1])),
            piexif.ExifIFD.ISOSpeedRatings: exif_defaults.get("ISOSpeedRatings", 0),
            piexif.ExifIFD.FocalLength: tuple(exif_defaults.get("FocalLength", [0,1]))
        }
        gps_ifd = {}
        lat, lon = exif_defaults.get("GPSLatitude"), exif_defaults.get("GPSLongitude")
        if lat is not None and lon is not None:
            gps_lat_data, gps_lon_data = _convert_to_gps(lat, False), _convert_to_gps(lon, True)
            gps_ifd.update({
                piexif.GPSIFD.GPSLatitude: gps_lat_data['value'],
                piexif.GPSIFD.GPSLatitudeRef: gps_lat_data['ref'],
                piexif.GPSIFD.GPSLongitude: gps_lon_data['value'],
                piexif.GPSIFD.GPSLongitudeRef: gps_lon_data['ref']
            })
        return piexif.dump({"0th": zeroth_ifd, "Exif": exif_ifd, "GPS": gps_ifd})
    except Exception as e:
        print(f"L·ªói khi t·∫°o d·ªØ li·ªáu EXIF: {e}")
        return b''

def trim_transparent_background(image):
    """C·∫Øt b·ªè to√†n b·ªô ph·∫ßn n·ªÅn trong su·ªët th·ª´a xung quanh v·∫≠t th·ªÉ."""
    bbox = image.getbbox()
    if bbox:
        return image.crop(bbox)
    return None

def load_config():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"L·ªói t·∫£i file config: {e}")
        return {}

def download_image_from_url(url):
    try:
        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=30)
        response.raise_for_status()
        return Image.open(BytesIO(response.content)).convert("RGBA")
    except Exception as e:
        print(f"L·ªói t·∫£i watermark t·ª´ {url}: {e}")
        return None

def clean_title(title):
    return os.path.splitext(title)[0].replace('-', ' ').replace('_', ' ').strip()

def remove_background(design_img):
    """X√≥a n·ªÅn c·ªßa ·∫£nh thi·∫øt k·∫ø b·∫±ng logic 'magic wand' t·ª´ c√°c g√≥c."""
    design_w, design_h = design_img.size
    pixels, visited = design_img.load(), set()
    
    corner_points = [
        (0, 0), (design_w - 1, 0), (0, design_h - 1), (design_w - 1, design_h - 1),
        (design_w // 2, 0), (design_w // 2, design_h - 1), (0, design_h // 2), (design_w - 1, design_h // 2)
    ]
    
    for start_x, start_y in corner_points:
        if (start_x, start_y) in visited: continue
        
        seed_r, seed_g, seed_b = design_img.getpixel((start_x, start_y))[:3]
        stack = [(start_x, start_y)]
        
        while stack:
            x, y = stack.pop()
            if not (0 <= x < design_w and 0 <= y < design_h) or (x, y) in visited: continue
            
            current_r, current_g, current_b = pixels[x, y][:3]
            
            if all(abs(c1 - c2) < 30 for c1, c2 in zip((current_r, current_g, current_b), (seed_r, seed_g, seed_b))):
                pixels[x, y] = (0, 0, 0, 0)
                visited.add((x, y))
                stack.extend([(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)])
    return design_img

def process_image(design_img, mockup_img, mockup_config, watermark_text):
    # 1. T√°ch n·ªÅn v√† c·∫Øt ·∫£nh g·ªçn g√†ng theo v·∫≠t th·ªÉ
    design_with_alpha = remove_background(design_img.copy())
    trimmed_design = trim_transparent_background(design_with_alpha)
    
    # N·∫øu ·∫£nh tr·ªëng sau khi t√°ch n·ªÅn th√¨ b·ªè qua
    if not trimmed_design: 
        return None

    # 2. L·∫•y th√¥ng s·ªë c·ªßa khung mockup v√† ƒë·ªëi t∆∞·ª£ng thi·∫øt k·∫ø
    coords = mockup_config.get("coords", {})
    mockup_frame_w, mockup_frame_h = coords['w'], coords['h']
    obj_w, obj_h = trimmed_design.size
    
    # 3. X√°c ƒë·ªãnh c√°c gi√° tr·ªã padding mong mu·ªën
    padding_x = 20  # Padding tr√°i v√† ph·∫£i
    padding_y_top = 20 # Padding tr√™n

    # 4. T√≠nh to√°n kh√¥ng gian c√≥ th·ªÉ s·ª≠ d·ª•ng cho thi·∫øt k·∫ø b√™n trong khung
    available_w = mockup_frame_w - (2 * padding_x)
    available_h = mockup_frame_h - padding_y_top

    # 5. T√≠nh to√°n t·ª∑ l·ªá resize (scaling)
    # ∆Øu ti√™n resize theo chi·ªÅu r·ªông tr∆∞·ªõc
    scale_ratio = available_w / obj_w
    
    # Ki·ªÉm tra xem v·ªõi t·ª∑ l·ªá n√†y, chi·ªÅu cao c√≥ b·ªã v∆∞·ª£t qu√° khung kh√¥ng
    if (obj_h * scale_ratio) > available_h:
        # N·∫øu chi·ªÅu cao v∆∞·ª£t qu√°, ta ph·∫£i ∆∞u ti√™n resize theo chi·ªÅu cao
        scale_ratio = available_h / obj_h

    # 6. √Åp d·ª•ng t·ª∑ l·ªá ƒë·ªÉ c√≥ k√≠ch th∆∞·ªõc cu·ªëi c√πng v√† resize ·∫£nh
    final_w = int(obj_w * scale_ratio)
    final_h = int(obj_h * scale_ratio)
    resized_design = trimmed_design.resize((final_w, final_h), Image.Resampling.LANCZOS)

    # 7. T√≠nh to√°n t·ªça ƒë·ªô ƒë·ªÉ d√°n ·∫£nh v√†o mockup
    # T·ªça ƒë·ªô Y: CƒÉn theo padding top
    paste_y = coords['y'] + padding_y_top
    # T·ªça ƒë·ªô X: CƒÉn gi·ªØa theo chi·ªÅu ngang ƒë·ªÉ ƒë·∫£m b·∫£o ·∫£nh lu√¥n c√¢n ƒë·ªëi
    paste_x = coords['x'] + (mockup_frame_w - final_w) // 2
    
    # 8. D√°n thi·∫øt k·∫ø ƒë√£ resize v√†o ·∫£nh mockup
    final_mockup = mockup_img.copy().convert("RGBA")
    final_mockup.paste(resized_design, (paste_x, paste_y), resized_design)
    
    # Ph·∫ßn x·ª≠ l√Ω watermark gi·ªØ nguy√™n nh∆∞ c≈©
    if watermark_text:
        if watermark_text.startswith(('http', 'https')):
            if watermark_img := download_image_from_url(watermark_text):
                wm_w, wm_h = watermark_img.size
                if wm_w > 280:
                    watermark_img = watermark_img.resize((280, int(280 * wm_h / wm_w)), Image.Resampling.LANCZOS)
                paste_x_wm = final_mockup.width - watermark_img.width - 20
                paste_y_wm = final_mockup.height - watermark_img.height - 50
                final_mockup.paste(watermark_img, (paste_x_wm, paste_y_wm), watermark_img)
        else:
            draw = ImageDraw.Draw(final_mockup)
            font_path = os.path.join(SCRIPT_DIR, "verdanab.ttf")
            font = ImageFont.truetype(font_path, 100) if os.path.exists(font_path) else ImageFont.load_default()
            text_bbox = draw.textbbox((0, 0), watermark_text, font=font)
            text_x = final_mockup.width - (text_bbox[2] - text_bbox[0]) - 20
            text_y = final_mockup.height - (text_bbox[3] - text_bbox[1]) - 50
            draw.text((text_x, text_y), watermark_text, fill=(0, 0, 0, 128), font=font)
            
    return final_mockup.convert("RGB")

def find_mockup_file(mockup_name, color):
    files = glob.glob(os.path.join(MOCKUP_DIR, f"{mockup_name}_{color}.*"))
    return files[0] if files else None

def main():
    print("üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh t·∫°o mockup...")
    
    total_counts = load_total_counts(TOTAL_IMAGE_FILE)

    os.makedirs(OUTPUT_IMAGE_DIR, exist_ok=True)
    for path in [MOCKUP_DIR, INPUT_DIR]:
        os.makedirs(path, exist_ok=True)

    configs = load_config()
    if not configs:
        print("‚ùå D·ª´ng l·∫°i do kh√¥ng th·ªÉ t·∫£i file config.")
        return
        
    defaults, mockup_sets = configs.get("defaults", {}), configs.get("mockup_sets", {})
    output_format, exif_defaults = defaults.get("global_output_format", "webp"), defaults.get("exif_defaults", {})
    
    images_to_process = [f for f in os.listdir(INPUT_DIR) if os.path.isfile(os.path.join(INPUT_DIR, f)) and not f.startswith('.')]

    if not images_to_process:
        print("‚úÖ Kh√¥ng c√≥ ·∫£nh m·ªõi ƒë·ªÉ x·ª≠ l√Ω.")
        return

    print(f"üîé T√¨m th·∫•y {len(images_to_process)} ·∫£nh m·ªõi ƒë·ªÉ x·ª≠ l√Ω.")
    images_for_output = {}
    total_generated_count = 0
    run_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

    for image_filename in images_to_process:
        print(f"\n--- üñºÔ∏è ƒêang x·ª≠ l√Ω: {image_filename} ---")
        try:
            with Image.open(os.path.join(INPUT_DIR, image_filename)) as img:
                img = img.convert("RGBA")
                is_background_light = sum(img.getpixel((5, 5))[:3]) / 3 > 128
                for mockup_name, mockup_config in mockup_sets.items():
                    if mockup_config.get("action", "generate").lower() == "skip":
                        print(f"  - ‚è© B·ªè qua mockup: '{mockup_name}'.")
                        continue

                    if mockup_file_path := find_mockup_file(mockup_name, "white" if is_background_light else "black"):
                        print(f"  - √Åp d·ª•ng mockup: '{mockup_name}' ({'white' if is_background_light else 'black'})")
                        with Image.open(mockup_file_path) as mockup_img:
                            if final_mockup := process_image(img, mockup_img, mockup_config, mockup_config.get("watermark_text")):
                                prefix, suffix = mockup_config.get("title_prefix_to_add", ""), mockup_config.get("title_suffix_to_add", "")
                                final_filename = f"{prefix} {clean_title(image_filename)} {suffix}".strip().replace('  ', ' ') + f".{output_format}"
                                exif_bytes = create_exif_data(mockup_name, final_filename, exif_defaults)
                                img_byte_arr = BytesIO()
                                final_mockup.save(img_byte_arr, format="WEBP" if output_format == "webp" else "JPEG", quality=90, exif=exif_bytes)
                                
                                if mockup_name not in images_for_output:
                                    images_for_output[mockup_name] = []
                                images_for_output[mockup_name].append((final_filename, img_byte_arr.getvalue()))
                                total_generated_count += 1
                
                print(f"  - ‚úÖ ƒê√£ x·ª≠ l√Ω xong ·∫£nh: {image_filename}")
        except Exception as e:
            print(f"‚ùå L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω file {image_filename}: {e}")

    if images_for_output:
        print("\n--- üíæ B·∫Øt ƒë·∫ßu l∆∞u ·∫£nh v√†o c√°c th∆∞ m·ª•c ---")
        for mockup_name, image_list in images_for_output.items():
            images_in_current_run = len(image_list)
            
            previous_total = total_counts.get(mockup_name, 0)
            total_counts[mockup_name] = previous_total + images_in_current_run
            
            output_subdir_name = f"{mockup_name}.{run_timestamp}.{images_in_current_run}"
            output_path = os.path.join(OUTPUT_IMAGE_DIR, output_subdir_name)
            os.makedirs(output_path, exist_ok=True)
            
            print(f"  - ƒêang t·∫°o v√† l∆∞u {images_in_current_run} ·∫£nh v√†o: {output_path}")
            for filename, data in image_list:
                file_path = os.path.join(output_path, filename)
                with open(file_path, 'wb') as f:
                    f.write(data)

    if images_to_process:
        cleanup_input_directory(INPUT_DIR, images_to_process)

    if total_counts:
        save_total_counts(TOTAL_IMAGE_FILE, total_counts)
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªïng s·ªë ·∫£nh trong file: {os.path.basename(TOTAL_IMAGE_FILE)}")


    print(f"\n--- ‚ú® Ho√†n t·∫•t! ---")
    print(f"T·ªïng s·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω trong l·∫ßn ch·∫°y n√†y: {len(images_to_process)}")
    print(f"T·ªïng s·ªë mockup ƒë√£ t·∫°o trong l·∫ßn ch·∫°y n√†y: {total_generated_count}")
    print(f"K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u t·∫°i th∆∞ m·ª•c: {OUTPUT_IMAGE_DIR}")

if __name__ == "__main__":
    main()